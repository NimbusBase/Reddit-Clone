// Generated by CoffeeScript 1.6.3
(function() {
  var syncInfo;

  syncInfo = {
    "GCloud": {
      "key": '352237559585-go83rqql7pi7ob3r0290vaa10lqdjite.apps.googleusercontent.com',
      "scope": 'https://www.googleapis.com/auth/devstorage.full_control',
      "app_name": "nimbus-reddit-clone",
      "api_key": 'y8UhA2Fgt2NIybwhmGX22tMN',
      "project_id": "352237559585"
    }
  };

  Nimbus.Auth.setup(syncInfo);

  Nimbus.Auth.service = "GCloud";

  localStorage["app_name"] = "waiter-code-sample-bucket";

  window.folder = {
    "Post": "Post",
    "Comment": "Comment",
    "UpVote": "UpVote",
    "DownVote": "DownVote"
  };

  window.Post = Nimbus.Model.setup("Post", ["title", "link", "category", "create_time"]);

  window.Comment = Nimbus.Model.setup("Comment", ["postid", "comment", "name"]);

  window.UpVote = Nimbus.Model.setup("UpVote", ["postid", "voter"]);

  window.DownVote = Nimbus.Model.setup("DownVote", ["postid", "voter"]);

  window.Post.ordersort = function(a, b) {
    var x, y;
    x = Date(a.create_time);
    y = Date(b.create_time);
    if (x < y) {
      return -1;
    } else {
      return 1;
    }
  };

  window.Redditate = angular.module("Redditate", []).controller("RedditateControl", function($scope) {
    $scope.login = "Login";
    $scope.newComment = "";
    $scope.loginOut = function() {
      if (Nimbus.Auth.authorized()) {
        Nimbus.Auth.logout();
        return $scope.loadData();
      } else {
        Nimbus.Auth.authorize("GCloud");
        return $scope.loadData();
      }
    };
    $scope.loadData = function() {
      var downVotes, i, upVotes, _i, _len, _ref, _results;
      if (Nimbus.Auth.authorized()) {
        $scope.login = "Logout";
        $scope.login_flag = true;
      } else {
        $scope.login = "Login";
        $scope.login_flag = false;
      }
      $scope.post_data = window.Post.all().sort(window.Post.ordersort);
      _ref = $scope.post_data;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        upVotes = window.UpVote.findAllByAttribute('postid', i.id);
        downVotes = window.DownVote.findAllByAttribute('postid', i.id);
        i.upVoteCount = upVotes.length;
        i.downVoteCount = downVotes.length;
        if (i.owner === localStorage["user_email"]) {
          i.canDelete = true;
        } else {
          i.canDelete = false;
        }
        _results.push(i.comments = window.Comment.findAllByAttribute("postid", i.id));
      }
      return _results;
    };
    $scope.loadData();
    $scope.bootPostAdd = function() {
      bootbox.prompt("Add new post", function(result) {
        if (result === null) {
          return;
        }
        if ((result.title === null) || (result.link === null)) {
          return alert("should not be  null");
        } else {
          return window.addPost(result.title, result.link);
        }
      });
      return $scope.loadData();
    };
    $scope.bootPostDelete = function(id) {
      return bootbox.confirm("Are you sure?", function(result) {
        var p;
        if (result === true) {
          p = window.Post.find(id);
          p.destroy();
          return $scope.loadData();
        }
      });
    };
    $scope.bootPostEdit = function(id) {
      bootbox.prompt("Edit  post", function(result) {
        if (result === null) {
          return;
        }
        if ((result.title === null) || (result.link === null)) {
          alert("should not be  null");
        } else {
          EditPost(id, result.title, result.link);
        }
        return $scope.loadData();
      }, id);
    };
    $scope.addComment = function(postid) {
      window.addComment(postid, $scope.newComment);
      $scope.newComment = "";
      return $scope.loadData();
    };
    $scope.addUpVote = function(postid) {
      var i, votes, _i, _len;
      if (!Nimbus.Auth.authorized()) {
        return alert("you should login before this action !");
      }
      votes = window.UpVote.findAllByAttribute('postid', postid);
      for (_i = 0, _len = votes.length; _i < _len; _i++) {
        i = votes[_i];
        if (i.voter === window.user_email) {
          return alert("you have voted~!");
        }
      }
      return window.addUpVote(postid);
    };
    $scope.addDownVote = function(postid) {
      var i, votes, _i, _len;
      if (!Nimbus.Auth.authorized()) {
        return alert("you should login before this action !");
      }
      votes = window.DownVote.findAllByAttribute('postid', postid);
      for (_i = 0, _len = votes.length; _i < _len; _i++) {
        i = votes[_i];
        if (i.voter === window.user_email) {
          return alert("you have voted~!");
        }
      }
      return window.addDownVote(postid);
    };
    $scope.showComment = function(id) {
      var className;
      className = $('#comment_' + id).attr('class');
      if (className === "foldout") {
        return $('#comment_' + id).attr('class', "foldout2");
      } else {
        return $('#comment_' + id).attr('class', "foldout");
      }
    };
    return $scope.ta = function() {
      return alert("hahaha");
    };
  });

  window.syncData = function() {
    return window.Post.sync_all(function() {
      return window.Comment.sync_all(function() {
        return window.UpVote.sync_all(function() {
          return window.DownVote.sync_all(function() {
            return window.loadData();
          });
        });
      });
    });
  };

  window.loadData = function() {
    angular.element('[ng-controller=RedditateControl]').scope().loadData();
    return angular.element('[ng-controller=RedditateControl]').scope().$apply();
  };

  Nimbus.Auth.set_app_ready(function() {
    if ((Nimbus.Auth.authorized != null) && Nimbus.Auth.authorized()) {
      localStorage["user_email"] = window.user_email;
    } else if (!(localStorage["state"] === "Auth")) {
      localStorage["Post_count"] = window.Post.all().length;
      localStorage["Comment_count"] = window.Comment.all().length;
    }
    window.syncData();
    angular.bootstrap(document.body, ['Redditate']);
    setInterval("window.syncData();", 5000);
    return setInterval("window.loadData();", 1000);
  });

  window.Login_out = function() {
    if ((Nimbus.Auth.authorized != null) && Nimbus.Auth.authorized()) {
      Nimbus.Auth.logout();
      return window.location.reload();
    } else {

    }
  };

  window.addPost = function(title, link) {
    var post;
    post = {
      "title": title,
      "category": null,
      "link": link,
      "create_time": Date(),
      "owner": window.user_email
    };
    window.Post.create(post);
    return window.loadData();
  };

  window.EditPost = function(id, title, link) {
    var p;
    p = Post.find(id);
    p.title = title;
    p.link = link;
    p.save();
    return window.loadData();
  };

  window.addComment = function(postid, comment) {
    var newcomment;
    comment = comment;
    newcomment = {
      "postid": postid,
      "comment": comment,
      "owner": window.user_email,
      "name": window.user_name
    };
    window.Comment.create(newcomment);
    return window.loadData();
  };

  window.addUpVote = function(postid) {
    var newUpVote;
    newUpVote = {
      "postid": postid,
      "voter": window.user_email
    };
    window.UpVote.create(newUpVote);
    return window.loadData();
  };

  window.addDownVote = function(postid) {
    var newDownVote;
    newDownVote = {
      "postid": postid,
      "voter": window.user_email
    };
    window.DownVote.create(newDownVote);
    return window.loadData();
  };

}).call(this);
